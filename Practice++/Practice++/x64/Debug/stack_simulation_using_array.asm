; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	?length@?$char_traits@D@std@@SA_KPEBD@Z		; std::char_traits<char>::length
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z	; std::char_traits<char>::eq_int_type
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
PUBLIC	??0Stack@@QEAA@XZ				; Stack::Stack
PUBLIC	??1Stack@@QEAA@XZ				; Stack::~Stack
PUBLIC	?isempty@Stack@@QEAA_NXZ			; Stack::isempty
PUBLIC	?push@Stack@@QEAAXH@Z				; Stack::push
PUBLIC	?pop@Stack@@QEAAXXZ				; Stack::pop
PUBLIC	?show_top@Stack@@QEAAXXZ			; Stack::show_top
PUBLIC	?displayStack@Stack@@QEAAXXZ			; Stack::displayStack
PUBLIC	??_GStack@@QEAAPEAXI@Z				; Stack::`scalar deleting destructor'
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	?stack_simulation@@YAHXZ			; stack_simulation
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??_C@_0BE@DHDMOABD@Pozvan?5destruktor?4?6?$AA@	; `string'
PUBLIC	??_C@_0P@LKJFJFHG@Stack?5is?5full?$CB?$AA@	; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_0BK@GFPDMCBK@Value?5pushed?5into?5stack?3?5?$AA@ ; `string'
PUBLIC	??_C@_0BA@LJDMLEOP@Stack?5is?5empty?$CB?$AA@	; `string'
PUBLIC	??_C@_0BJ@KLKDPNDI@Value?5poped?5from?5stack?3?5?$AA@ ; `string'
PUBLIC	??_C@_0BE@HFOBAJI@Element?5at?5top?5is?3?5?$AA@	; `string'
PUBLIC	??_C@_0BB@MKODCLNH@Stack?5is?5empty?$CB?6?$AA@	; `string'
PUBLIC	??_C@_05BIEBAFMA@?5is?3?5?$AA@			; `string'
PUBLIC	??_C@_0BD@HAEGGMLF@Element?5at?3?5INDEX?5?$AA@	; `string'
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	??_U@YAPEAX_K@Z:PROC				; operator new[]
EXTRN	??_V@YAXPEAX@Z:PROC				; operator delete[]
EXTRN	strlen:PROC
EXTRN	__imp_?uncaught_exception@std@@YA_NXZ:PROC
EXTRN	__imp_?good@ios_base@std@@QEBA_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QEBAHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEBA_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEAA_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CxxFrameHandler3:PROC
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$char_traits@D@std@@SA_KPEBD@Z DD imagerel $LN5
	DD	imagerel $LN5+105
	DD	imagerel $unwind$?length@?$char_traits@D@std@@SA_KPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z DD imagerel $LN5
	DD	imagerel $LN5+104
	DD	imagerel $unwind$?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eof@?$char_traits@D@std@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$?eof@?$char_traits@D@std@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Stack@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+163
	DD	imagerel $unwind$??0Stack@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1Stack@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+113
	DD	imagerel $unwind$??1Stack@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isempty@Stack@@QEAA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+71
	DD	imagerel $unwind$?isempty@Stack@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push@Stack@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+251
	DD	imagerel $unwind$?push@Stack@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pop@Stack@@QEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+209
	DD	imagerel $unwind$?pop@Stack@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?show_top@Stack@@QEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+187
	DD	imagerel $unwind$?show_top@Stack@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?displayStack@Stack@@QEAAXXZ DD imagerel $LN8
	DD	imagerel $LN8+247
	DD	imagerel $unwind$?displayStack@Stack@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GStack@@QEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$??_GStack@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD imagerel $LN25
	DD	imagerel $LN25+1001
	DD	imagerel $unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+80
	DD	imagerel $unwind$?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stack_simulation@@YAHXZ DD imagerel $LN9
	DD	imagerel $LN9+445
	DD	imagerel $unwind$?stack_simulation@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??stack_simulation@@YAHXZ@4HA DD imagerel ?dtor$0@?0??stack_simulation@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??stack_simulation@@YAHXZ@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??stack_simulation@@YAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??stack_simulation@@YAHXZ@4HA DD imagerel ?dtor$1@?0??stack_simulation@@YAHXZ@4HA
	DD	imagerel ?dtor$1@?0??stack_simulation@@YAHXZ@4HA+44
	DD	imagerel $unwind$?dtor$1@?0??stack_simulation@@YAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN4
	DD	imagerel $LN4+219
	DD	imagerel $unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+204
	DD	imagerel $unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN5
	DD	imagerel $LN5+319
	DD	imagerel $unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA DD imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+107
	DD	imagerel $unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BD@HAEGGMLF@Element?5at?3?5INDEX?5?$AA@
CONST	SEGMENT
??_C@_0BD@HAEGGMLF@Element?5at?3?5INDEX?5?$AA@ DB 'Element at: INDEX ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05BIEBAFMA@?5is?3?5?$AA@
CONST	SEGMENT
??_C@_05BIEBAFMA@?5is?3?5?$AA@ DB ' is: ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MKODCLNH@Stack?5is?5empty?$CB?6?$AA@
CONST	SEGMENT
??_C@_0BB@MKODCLNH@Stack?5is?5empty?$CB?6?$AA@ DB 'Stack is empty!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HFOBAJI@Element?5at?5top?5is?3?5?$AA@
CONST	SEGMENT
??_C@_0BE@HFOBAJI@Element?5at?5top?5is?3?5?$AA@ DB 'Element at top is: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KLKDPNDI@Value?5poped?5from?5stack?3?5?$AA@
CONST	SEGMENT
??_C@_0BJ@KLKDPNDI@Value?5poped?5from?5stack?3?5?$AA@ DB 'Value poped fro'
	DB	'm stack: ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LJDMLEOP@Stack?5is?5empty?$CB?$AA@
CONST	SEGMENT
??_C@_0BA@LJDMLEOP@Stack?5is?5empty?$CB?$AA@ DB 'Stack is empty!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GFPDMCBK@Value?5pushed?5into?5stack?3?5?$AA@
CONST	SEGMENT
??_C@_0BK@GFPDMCBK@Value?5pushed?5into?5stack?3?5?$AA@ DB 'Value pushed i'
	DB	'nto stack: ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LKJFJFHG@Stack?5is?5full?$CB?$AA@
CONST	SEGMENT
??_C@_0P@LKJFJFHG@Stack?5is?5full?$CB?$AA@ DB 'Stack is full!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DHDMOABD@Pozvan?5destruktor?4?6?$AA@
CONST	SEGMENT
??_C@_0BE@DHDMOABD@Pozvan?5destruktor?4?6?$AA@ DB 'Pozvan destruktor.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
	DD	0ffffffffH
	DD	imagerel ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z+78
	DD	00H
	DD	imagerel ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z+302
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
	DD	0e8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 025053a11H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DD	0e8H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070023H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 025052f01H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??stack_simulation@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??stack_simulation@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?stack_simulation@@YAHXZ DD imagerel ?stack_simulation@@YAHXZ
	DD	0ffffffffH
	DD	imagerel ?stack_simulation@@YAHXZ+51
	DD	00H
	DD	imagerel ?stack_simulation@@YAHXZ+165
	DD	01H
	DD	imagerel ?stack_simulation@@YAHXZ+221
	DD	00H
	DD	imagerel ?stack_simulation@@YAHXZ+400
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?stack_simulation@@YAHXZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??stack_simulation@@YAHXZ@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0??stack_simulation@@YAHXZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stack_simulation@@YAHXZ DD 025052911H
	DD	010a230fH
	DD	07003003fH
	DD	05002H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?stack_simulation@@YAHXZ
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stack_simulation@@YAHXZ$rtcName$0 DB 073H		; stack_simulation
	DB	074H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?stack_simulation@@YAHXZ$rtcVarDesc DD 028H		; stack_simulation
	DD	010H
	DQ	FLAT:?stack_simulation@@YAHXZ$rtcName$0
	ORG $+48
?stack_simulation@@YAHXZ$rtcFrameData DD 01H		; stack_simulation
	DD	00H
	DQ	FLAT:?stack_simulation@@YAHXZ$rtcVarDesc
$cppxdata$?stack_simulation@@YAHXZ DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$?stack_simulation@@YAHXZ
	DD	00H
	DD	00H
	DD	05H
	DD	imagerel $ip2state$?stack_simulation@@YAHXZ
	DD	01d8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 031019H
	DD	0700c4210H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD imagerel ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	0ffffffffH
	DD	imagerel ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z+252
	DD	00H
	DD	imagerel ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z+282
	DD	01H
	DD	imagerel ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z+895
	DD	00H
	DD	imagerel ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z+953
	DD	0ffffffffH
	DD	imagerel ?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	00H
	DD	imagerel ?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+20
	DD	02H
	DD	imagerel ?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+65
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 040H
	DD	00H
	DD	00H
	DD	imagerel ?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	imagerel $handlerMap$0$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	00H
	DD	00H
	DD	00H
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 025053a19H
	DD	01132318H
	DD	0700c0049H
	DD	0500bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcName$0 DB 05fH ; std::operator<<<std::char_traits<char> >
	DB	04fH
	DB	06bH
	DB	00H
	ORG $+12
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcVarDesc DD 088H ; std::operator<<<std::char_traits<char> >
	DD	010H
	DQ	FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcName$0
	ORG $+48
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcFrameData DD 01H ; std::operator<<<std::char_traits<char> >
	DD	00H
	DQ	FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcVarDesc
$cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 019930522H
	DD	03H
	DD	imagerel $stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	01H
	DD	imagerel $tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	08H
	DD	imagerel $ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	0218H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GStack@@QEAAPEAXI@Z DD 025052e01H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?displayStack@Stack@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	070070023H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?show_top@Stack@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pop@Stack@@QEAAXXZ DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push@Stack@@QEAAXH@Z DD 025052e01H
	DD	01122317H
	DD	0700b001fH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isempty@Stack@@QEAA_NXZ DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1Stack@@QEAA@XZ DD imagerel ??1Stack@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1Stack@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1Stack@@QEAA@XZ
	DD	0108H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1Stack@@QEAA@XZ DD 025053519H
	DD	010e2313H
	DD	070070025H
	DD	05006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1Stack@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Stack@@QEAA@XZ DD 025052a01H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eof@?$char_traits@D@std@@SAHXZ DD 05051c01H
	DD	010a030dH
	DD	070030019H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z DD 05052d01H
	DD	01130316H
	DD	0700c001bH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$char_traits@D@std@@SA_KPEBD@Z DD 025052a01H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_K@Z DD 05052d01H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX@Z DD 05052801H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File g:\vb.net\vc\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT

; 141  : 			{	// test if stream state okay

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	rbp, rsp
	mov	rdi, rsp
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+232]

; 142  : 			return (_Ok);

	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, BYTE PTR [rax+8]

; 143  : 			}

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File g:\vb.net\vc\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
this$ = 256
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT

; 130  : 			{	// destroy the object

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	mov	QWORD PTR $T1[rbp], -2

; 131  :  #if _HAS_EXCEPTIONS
; 132  : 			if (!_XSTD uncaught_exception())

	call	QWORD PTR __imp_?uncaught_exception@std@@YA_NXZ
	npad	1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@sentry

; 133  : 				this->_Myostr._Osfx();

	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
	npad	1
$LN2@sentry:

; 134  : 
; 135  :  #else /* _HAS_EXCEPTIONS */
; 136  : 			this->_Myostr._Osfx();
; 137  :  #endif /* _HAS_EXCEPTIONS */
; 138  : 			}

	mov	rcx, QWORD PTR this$[rbp]
	call	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
	npad	1
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File g:\vb.net\vc\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
_Ostr$ = 264
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT

; 123  : 			{	// construct locking and testing stream

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	mov	QWORD PTR $T1[rbp], -2

; 122  : 			: _Sentry_base(_Ostr)

	mov	rdx, QWORD PTR _Ostr$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
	npad	1

; 124  : 			if (_Ostr.good() && _Ostr.tie() != 0 && _Ostr.tie() != &_Ostr)

	mov	rax, QWORD PTR _Ostr$[rbp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_?good@ios_base@std@@QEBA_NXZ
	movzx	eax, al
	test	eax, eax
	je	$LN2@sentry
	mov	rax, QWORD PTR _Ostr$[rbp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
	test	rax, rax
	je	SHORT $LN2@sentry
	mov	rax, QWORD PTR _Ostr$[rbp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
	cmp	rax, QWORD PTR _Ostr$[rbp]
	je	SHORT $LN2@sentry

; 125  : 				_Ostr.tie()->flush();

	mov	rax, QWORD PTR _Ostr$[rbp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
	mov	rcx, rax
	call	QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ
$LN2@sentry:

; 126  : 			_Ok = _Ostr.good();	// store test only after flushing tie

	mov	rax, QWORD PTR _Ostr$[rbp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_?good@ios_base@std@@QEBA_NXZ
	mov	rcx, QWORD PTR this$[rbp]
	mov	BYTE PTR [rcx+8], al

; 127  : 			}

	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
_Ostr$ = 264
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	rcx, QWORD PTR this$[rbp]
	call	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 200
this$ = 256
_Ostr$ = 264
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	rcx, QWORD PTR this$[rbp]
	call	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File g:\vb.net\vc\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
tv87 = 216
tv72 = 216
tv94 = 224
this$ = 272
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT

; 106  : 			{	// destroy after unlocking

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+312]
	mov	QWORD PTR $T1[rbp], -2

; 107  : 			if (_Myostr.rdbuf() != 0)

	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv72[rbp], rax
	mov	rax, QWORD PTR tv72[rbp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR tv72[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	npad	1
	test	rax, rax
	je	SHORT $LN2@Sentry_bas

; 108  : 				_Myostr.rdbuf()->_Unlock();

	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv87[rbp], rax
	mov	rax, QWORD PTR tv87[rbp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR tv87[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	npad	1
	mov	QWORD PTR tv94[rbp], rax
	mov	rax, QWORD PTR tv94[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR tv94[rbp]
	call	QWORD PTR [rax+16]
	npad	1
$LN2@Sentry_bas:

; 109  : 			}

	lea	rsp, QWORD PTR [rbp+248]
	pop	rdi
	pop	rbp
	ret	0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File g:\vb.net\vc\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
tv88 = 192
tv73 = 192
tv95 = 200
this$ = 240
_Ostr$ = 248
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT

; 100  : 			{	// lock the stream buffer, if there

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+280]

; 99   : 			: _Myostr(_Ostr)

	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR _Ostr$[rbp]
	mov	QWORD PTR [rax], rcx

; 101  : 			if (_Myostr.rdbuf() != 0)

	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv73[rbp], rax
	mov	rax, QWORD PTR tv73[rbp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR tv73[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	test	rax, rax
	je	SHORT $LN2@Sentry_bas

; 102  : 				_Myostr.rdbuf()->_Lock();

	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv88[rbp], rax
	mov	rax, QWORD PTR tv88[rbp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR tv88[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	mov	QWORD PTR tv95[rbp], rax
	mov	rax, QWORD PTR tv95[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR tv95[rbp]
	call	QWORD PTR [rax+8]
$LN2@Sentry_bas:

; 103  : 			}

	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File g:\github\nkuzmic97\practice.cpp\practice++\practice++\stack_simulation_using_array.cpp
;	COMDAT ?stack_simulation@@YAHXZ
_TEXT	SEGMENT
stack$ = 8
hstack$ = 56
$T4 = 280
$T5 = 312
$T6 = 344
$T7 = 376
$T8 = 404
$T9 = 440
tv136 = 456
tv90 = 456
?stack_simulation@@YAHXZ PROC				; stack_simulation, COMDAT

; 63   : {

$LN9:
	push	rbp
	push	rdi
	sub	rsp, 504				; 000001f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 126				; 0000007eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	QWORD PTR $T9[rbp], -2

; 64   : 	//Kreiranje objekta stack klase Stack koristeci STACK memoriju.
; 65   : 	Stack stack;

	lea	rcx, QWORD PTR stack$[rbp]
	call	??0Stack@@QEAA@XZ			; Stack::Stack
	npad	1

; 66   : 	stack.push(2);

	mov	edx, 2
	lea	rcx, QWORD PTR stack$[rbp]
	call	?push@Stack@@QEAAXH@Z			; Stack::push

; 67   : 	stack.push(3);

	mov	edx, 3
	lea	rcx, QWORD PTR stack$[rbp]
	call	?push@Stack@@QEAAXH@Z			; Stack::push

; 68   : 	stack.displayStack();

	lea	rcx, QWORD PTR stack$[rbp]
	call	?displayStack@Stack@@QEAAXXZ		; Stack::displayStack

; 69   : 	stack.pop();

	lea	rcx, QWORD PTR stack$[rbp]
	call	?pop@Stack@@QEAAXXZ			; Stack::pop

; 70   : 	stack.push(5);

	mov	edx, 5
	lea	rcx, QWORD PTR stack$[rbp]
	call	?push@Stack@@QEAAXH@Z			; Stack::push

; 71   : 	stack.show_top();

	lea	rcx, QWORD PTR stack$[rbp]
	call	?show_top@Stack@@QEAAXXZ		; Stack::show_top

; 72   : 	stack.displayStack();

	lea	rcx, QWORD PTR stack$[rbp]
	call	?displayStack@Stack@@QEAAXXZ		; Stack::displayStack

; 73   : 	cout << "\n";

	lea	rdx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
	mov	rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 74   : 	//Kreiranje dinamickog objekta hstack klase Stack koristeci HEAP memoriju.
; 75   : 	Stack* hstack = new Stack();

	mov	ecx, 16
	call	??2@YAPEAX_K@Z				; operator new
	mov	QWORD PTR $T5[rbp], rax
	cmp	QWORD PTR $T5[rbp], 0
	je	SHORT $LN3@stack_simu
	mov	rcx, QWORD PTR $T5[rbp]
	call	??0Stack@@QEAA@XZ			; Stack::Stack
	mov	QWORD PTR tv90[rbp], rax
	jmp	SHORT $LN4@stack_simu
$LN3@stack_simu:
	mov	QWORD PTR tv90[rbp], 0
$LN4@stack_simu:
	mov	rax, QWORD PTR tv90[rbp]
	mov	QWORD PTR $T4[rbp], rax
	mov	rax, QWORD PTR $T4[rbp]
	mov	QWORD PTR hstack$[rbp], rax

; 76   : 	(*hstack).push(2);

	mov	edx, 2
	mov	rcx, QWORD PTR hstack$[rbp]
	call	?push@Stack@@QEAAXH@Z			; Stack::push

; 77   : 	(*hstack).push(3);

	mov	edx, 3
	mov	rcx, QWORD PTR hstack$[rbp]
	call	?push@Stack@@QEAAXH@Z			; Stack::push

; 78   : 	(*hstack).displayStack();

	mov	rcx, QWORD PTR hstack$[rbp]
	call	?displayStack@Stack@@QEAAXXZ		; Stack::displayStack

; 79   : 	(*hstack).pop();

	mov	rcx, QWORD PTR hstack$[rbp]
	call	?pop@Stack@@QEAAXXZ			; Stack::pop

; 80   : 	(*hstack).push(5);

	mov	edx, 5
	mov	rcx, QWORD PTR hstack$[rbp]
	call	?push@Stack@@QEAAXH@Z			; Stack::push

; 81   : 	(*hstack).show_top();

	mov	rcx, QWORD PTR hstack$[rbp]
	call	?show_top@Stack@@QEAAXXZ		; Stack::show_top

; 82   : 	(*hstack).displayStack();

	mov	rcx, QWORD PTR hstack$[rbp]
	call	?displayStack@Stack@@QEAAXXZ		; Stack::displayStack

; 83   : 	delete hstack;

	mov	rax, QWORD PTR hstack$[rbp]
	mov	QWORD PTR $T7[rbp], rax
	mov	rax, QWORD PTR $T7[rbp]
	mov	QWORD PTR $T6[rbp], rax
	cmp	QWORD PTR $T6[rbp], 0
	je	SHORT $LN5@stack_simu
	mov	edx, 1
	mov	rcx, QWORD PTR $T6[rbp]
	call	??_GStack@@QEAAPEAXI@Z
	mov	QWORD PTR tv136[rbp], rax
	jmp	SHORT $LN6@stack_simu
$LN5@stack_simu:
	mov	QWORD PTR tv136[rbp], 0
$LN6@stack_simu:

; 84   : 	hstack = nullptr;

	mov	QWORD PTR hstack$[rbp], 0

; 85   : 	//Github
; 86   : 	return 0;

	mov	DWORD PTR $T8[rbp], 0
	lea	rcx, QWORD PTR stack$[rbp]
	call	??1Stack@@QEAA@XZ			; Stack::~Stack
	mov	eax, DWORD PTR $T8[rbp]

; 87   : }

	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?stack_simulation@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	lea	rsp, QWORD PTR [rbp+472]
	pop	rdi
	pop	rbp
	ret	0
?stack_simulation@@YAHXZ ENDP				; stack_simulation
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
stack$ = 8
hstack$ = 56
$T4 = 280
$T5 = 312
$T6 = 344
$T7 = 376
$T8 = 404
$T9 = 440
tv136 = 456
tv90 = 456
?dtor$0@?0??stack_simulation@@YAHXZ@4HA PROC		; `stack_simulation'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	lea	rcx, QWORD PTR stack$[rbp]
	call	??1Stack@@QEAA@XZ			; Stack::~Stack
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??stack_simulation@@YAHXZ@4HA ENDP		; `stack_simulation'::`1'::dtor$0
stack$ = 8
hstack$ = 56
$T4 = 280
$T5 = 312
$T6 = 344
$T7 = 376
$T8 = 404
$T9 = 440
tv136 = 456
tv90 = 456
?dtor$1@?0??stack_simulation@@YAHXZ@4HA PROC		; `stack_simulation'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	edx, 16
	mov	rcx, QWORD PTR $T5[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0??stack_simulation@@YAHXZ@4HA ENDP		; `stack_simulation'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
stack$ = 8
hstack$ = 56
$T4 = 280
$T5 = 312
$T6 = 344
$T7 = 376
$T8 = 404
$T9 = 440
tv136 = 456
tv90 = 456
?dtor$0@?0??stack_simulation@@YAHXZ@4HA PROC		; `stack_simulation'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	lea	rcx, QWORD PTR stack$[rbp]
	call	??1Stack@@QEAA@XZ			; Stack::~Stack
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??stack_simulation@@YAHXZ@4HA ENDP		; `stack_simulation'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
stack$ = 8
hstack$ = 56
$T4 = 280
$T5 = 312
$T6 = 344
$T7 = 376
$T8 = 404
$T9 = 440
tv136 = 456
tv90 = 456
?dtor$1@?0??stack_simulation@@YAHXZ@4HA PROC		; `stack_simulation'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	edx, 16
	mov	rcx, QWORD PTR $T5[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0??stack_simulation@@YAHXZ@4HA ENDP		; `stack_simulation'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File g:\vb.net\vc\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
_TEXT	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
$T9 = 504
tv299 = 516
tv294 = 516
tv139 = 516
tv300 = 520
tv297 = 520
tv295 = 520
tv137 = 520
tv301 = 528
tv298 = 528
tv296 = 528
_Ostr$ = 576
_Val$ = 584
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 782  : 	{	// insert NTBS into char stream

$LN25:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 584				; 00000248H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 146				; 00000092H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+616]
	mov	QWORD PTR $T9[rbp], -2

; 783  : 	typedef char _Elem;
; 784  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 785  : 	ios_base::iostate _State = ios_base::goodbit;

	mov	DWORD PTR _State$[rbp], 0

; 786  : 	streamsize _Count = (streamsize)_Traits::length(_Val);	// may overflow

	mov	rcx, QWORD PTR _Val$[rbp]
	call	?length@?$char_traits@D@std@@SA_KPEBD@Z	; std::char_traits<char>::length
	mov	QWORD PTR _Count$[rbp], rax

; 787  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count

	mov	rax, QWORD PTR _Ostr$[rbp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
	test	rax, rax
	jle	SHORT $LN17@operator
	mov	rax, QWORD PTR _Ostr$[rbp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
	cmp	rax, QWORD PTR _Count$[rbp]
	jle	SHORT $LN17@operator
	mov	rax, QWORD PTR _Ostr$[rbp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
	sub	rax, QWORD PTR _Count$[rbp]
	mov	QWORD PTR tv137[rbp], rax
	jmp	SHORT $LN18@operator
$LN17@operator:
	mov	QWORD PTR tv137[rbp], 0
$LN18@operator:
	mov	rax, QWORD PTR tv137[rbp]
	mov	QWORD PTR _Pad$[rbp], rax

; 788  : 		? 0 : _Ostr.width() - _Count;
; 789  : 	const typename _Myos::sentry _Ok(_Ostr);

	mov	rdx, QWORD PTR _Ostr$[rbp]
	lea	rcx, QWORD PTR _Ok$[rbp]
	call	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
	npad	1

; 790  : 
; 791  : 	if (!_Ok)

	lea	rcx, QWORD PTR _Ok$[rbp]
	call	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN8@operator

; 792  : 		_State |= ios_base::badbit;

	mov	eax, DWORD PTR _State$[rbp]
	or	eax, 4
	mov	DWORD PTR _State$[rbp], eax

; 793  : 	else

	jmp	$LN9@operator
$LN8@operator:

; 794  : 		{	// state okay, insert
; 795  : 		_TRY_IO_BEGIN
; 796  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

	mov	rax, QWORD PTR _Ostr$[rbp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_?flags@ios_base@std@@QEBAHXZ
	mov	DWORD PTR tv139[rbp], eax
	mov	eax, DWORD PTR tv139[rbp]
	and	eax, 448				; 000001c0H
	cmp	eax, 64					; 00000040H
	je	$LN11@operator

; 797  : 			for (; 0 < _Pad; --_Pad)	// pad on left

	jmp	SHORT $LN4@operator
$LN2@operator:
	mov	rax, QWORD PTR _Pad$[rbp]
	dec	rax
	mov	QWORD PTR _Pad$[rbp], rax
$LN4@operator:
	cmp	QWORD PTR _Pad$[rbp], 0
	jle	$LN11@operator

; 798  : 				if (_Traits::eq_int_type(_Traits::eof(),

	mov	rax, QWORD PTR _Ostr$[rbp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
	mov	BYTE PTR tv294[rbp], al
	mov	rax, QWORD PTR _Ostr$[rbp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	mov	QWORD PTR tv295[rbp], rax
	movzx	edx, BYTE PTR tv294[rbp]
	mov	rcx, QWORD PTR tv295[rbp]
	call	QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
	mov	DWORD PTR tv296[rbp], eax
	mov	eax, DWORD PTR tv296[rbp]
	mov	DWORD PTR $T4[rbp], eax
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR $T5[rbp], eax
	lea	rdx, QWORD PTR $T4[rbp]
	lea	rcx, QWORD PTR $T5[rbp]
	call	?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN12@operator

; 799  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 800  : 					{	// insertion failed, quit
; 801  : 					_State |= ios_base::badbit;

	mov	eax, DWORD PTR _State$[rbp]
	or	eax, 4
	mov	DWORD PTR _State$[rbp], eax

; 802  : 					break;

	jmp	SHORT $LN11@operator
$LN12@operator:

; 803  : 					}
; 804  : 
; 805  : 		if (_State == ios_base::goodbit

	jmp	$LN2@operator
$LN11@operator:

; 806  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

	cmp	DWORD PTR _State$[rbp], 0
	jne	SHORT $LN13@operator
	mov	rax, QWORD PTR _Ostr$[rbp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	mov	QWORD PTR tv297[rbp], rax
	mov	r8, QWORD PTR _Count$[rbp]
	mov	rdx, QWORD PTR _Val$[rbp]
	mov	rcx, QWORD PTR tv297[rbp]
	call	QWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z
	mov	QWORD PTR tv298[rbp], rax
	mov	rax, QWORD PTR _Count$[rbp]
	cmp	QWORD PTR tv298[rbp], rax
	je	SHORT $LN13@operator

; 807  : 			_State |= ios_base::badbit;

	mov	eax, DWORD PTR _State$[rbp]
	or	eax, 4
	mov	DWORD PTR _State$[rbp], eax
$LN13@operator:

; 808  : 
; 809  : 		if (_State == ios_base::goodbit)

	cmp	DWORD PTR _State$[rbp], 0
	jne	$LN14@operator

; 810  : 			for (; 0 < _Pad; --_Pad)	// pad on right

	jmp	SHORT $LN7@operator
$LN5@operator:
	mov	rax, QWORD PTR _Pad$[rbp]
	dec	rax
	mov	QWORD PTR _Pad$[rbp], rax
$LN7@operator:
	cmp	QWORD PTR _Pad$[rbp], 0
	jle	$LN14@operator

; 811  : 				if (_Traits::eq_int_type(_Traits::eof(),

	mov	rax, QWORD PTR _Ostr$[rbp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
	mov	BYTE PTR tv299[rbp], al
	mov	rax, QWORD PTR _Ostr$[rbp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	mov	QWORD PTR tv300[rbp], rax
	movzx	edx, BYTE PTR tv299[rbp]
	mov	rcx, QWORD PTR tv300[rbp]
	call	QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
	mov	DWORD PTR tv301[rbp], eax
	mov	eax, DWORD PTR tv301[rbp]
	mov	DWORD PTR $T6[rbp], eax
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR $T7[rbp], eax
	lea	rdx, QWORD PTR $T6[rbp]
	lea	rcx, QWORD PTR $T7[rbp]
	call	?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@operator

; 812  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 813  : 					{	// insertion failed, quit
; 814  : 					_State |= ios_base::badbit;

	mov	eax, DWORD PTR _State$[rbp]
	or	eax, 4
	mov	DWORD PTR _State$[rbp], eax

; 815  : 					break;

	jmp	SHORT $LN14@operator
$LN15@operator:

; 816  : 					}

	jmp	$LN5@operator
$LN14@operator:

; 817  : 		_Ostr.width(0);

	mov	rax, QWORD PTR _Ostr$[rbp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	xor	edx, edx
	mov	rcx, rax
	call	QWORD PTR __imp_?width@ios_base@std@@QEAA_J_J@Z
	npad	1
	jmp	SHORT $LN9@operator
$LN23@operator:
$LN9@operator:

; 818  : 		_CATCH_IO_(_Ostr)
; 819  : 		}
; 820  : 
; 821  : 	_Ostr.setstate(_State);

	mov	rax, QWORD PTR _Ostr$[rbp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	xor	r8d, r8d
	mov	edx, DWORD PTR _State$[rbp]
	mov	rcx, rax
	call	QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z

; 822  : 	return (_Ostr);

	mov	rax, QWORD PTR _Ostr$[rbp]
	mov	QWORD PTR $T8[rbp], rax
	lea	rcx, QWORD PTR _Ok$[rbp]
	call	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
	mov	rax, QWORD PTR $T8[rbp]

; 823  : 	}

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+552]
	pop	rdi
	pop	rbp
	ret	0
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ENDP ; std::operator<<<std::char_traits<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
$T9 = 504
tv299 = 516
tv294 = 516
tv139 = 516
tv300 = 520
tv297 = 520
tv295 = 520
tv137 = 520
tv301 = 528
tv298 = 528
tv296 = 528
_Ostr$ = 576
_Val$ = 584
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	lea	rcx, QWORD PTR _Ok$[rbp]
	call	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
$T9 = 504
tv299 = 516
tv294 = 516
tv139 = 516
tv300 = 520
tv297 = 520
tv295 = 520
tv137 = 520
tv301 = 528
tv298 = 528
tv296 = 528
_Ostr$ = 576
_Val$ = 584
?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$0

; 818  : 		_CATCH_IO_(_Ostr)

	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
	mov	rax, QWORD PTR _Ostr$[rbp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8b, 1
	mov	edx, 4
	mov	rcx, rax
	call	QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
	npad	1
	lea	rax, $LN23@catch$0
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
	int	3
?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
$T9 = 504
tv299 = 516
tv294 = 516
tv139 = 516
tv300 = 520
tv297 = 520
tv295 = 520
tv137 = 520
tv301 = 528
tv298 = 528
tv296 = 528
_Ostr$ = 576
_Val$ = 584
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	lea	rcx, QWORD PTR _Ok$[rbp]
	call	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
$T9 = 504
tv299 = 516
tv294 = 516
tv139 = 516
tv300 = 520
tv297 = 520
tv295 = 520
tv137 = 520
tv301 = 528
tv298 = 528
tv296 = 528
_Ostr$ = 576
_Val$ = 584
?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$0

; 818  : 		_CATCH_IO_(_Ostr)

	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
	mov	rax, QWORD PTR _Ostr$[rbp]
	mov	rax, QWORD PTR [rax]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR _Ostr$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8b, 1
	mov	edx, 4
	mov	rcx, rax
	call	QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
	npad	1
	lea	rax, $LN23@catch$0
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
	int	3
?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GStack@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_GStack@@QEAAPEAXI@Z PROC				; Stack::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+264]
	mov	rcx, QWORD PTR this$[rbp]
	call	??1Stack@@QEAA@XZ			; Stack::~Stack
	mov	eax, DWORD PTR __flags$[rbp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 16
	mov	rcx, QWORD PTR this$[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??_GStack@@QEAAPEAXI@Z ENDP				; Stack::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File g:\github\nkuzmic97\practice.cpp\practice++\practice++\stack_simulation_using_array.cpp
;	COMDAT ?displayStack@Stack@@QEAAXXZ
_TEXT	SEGMENT
i$1 = 4
tv87 = 216
tv73 = 224
this$ = 272
?displayStack@Stack@@QEAAXXZ PROC			; Stack::displayStack, COMDAT

; 51   : 	void displayStack() {

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+312]

; 52   : 		if (isempty()) {

	mov	rcx, QWORD PTR this$[rbp]
	call	?isempty@Stack@@QEAA_NXZ		; Stack::isempty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@displaySta

; 53   : 			cout << "Stack is empty!\n";

	lea	rdx, OFFSET FLAT:??_C@_0BB@MKODCLNH@Stack?5is?5empty?$CB?6?$AA@
	mov	rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 54   : 		}
; 55   : 		else {

	jmp	$LN6@displaySta
$LN5@displaySta:

; 56   : 			for (int i = 0; i <= top; i++) {

	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@displaySta
$LN2@displaySta:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@displaySta:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR i$1[rbp], eax
	jg	SHORT $LN3@displaySta

; 57   : 				cout << "Element at: INDEX " << i << " is: " << array[i] << "\n";

	movsxd	rax, DWORD PTR i$1[rbp]
	mov	QWORD PTR tv87[rbp], rax
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv73[rbp], rcx
	lea	rdx, OFFSET FLAT:??_C@_0BD@HAEGGMLF@Element?5at?3?5INDEX?5?$AA@
	mov	rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	edx, DWORD PTR i$1[rbp]
	mov	rcx, rax
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
	lea	rdx, OFFSET FLAT:??_C@_05BIEBAFMA@?5is?3?5?$AA@
	mov	rcx, rax
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	rdx, QWORD PTR tv73[rbp]
	mov	rcx, QWORD PTR tv87[rbp]
	mov	edx, DWORD PTR [rdx+rcx*4]
	mov	rcx, rax
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
	lea	rdx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
	mov	rcx, rax
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 58   : 			}

	jmp	$LN2@displaySta
$LN3@displaySta:
$LN6@displaySta:

; 59   : 		}
; 60   : 	}

	lea	rsp, QWORD PTR [rbp+248]
	pop	rdi
	pop	rbp
	ret	0
?displayStack@Stack@@QEAAXXZ ENDP			; Stack::displayStack
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File g:\github\nkuzmic97\practice.cpp\practice++\practice++\stack_simulation_using_array.cpp
;	COMDAT ?show_top@Stack@@QEAAXXZ
_TEXT	SEGMENT
tv80 = 192
tv68 = 200
this$ = 240
?show_top@Stack@@QEAAXXZ PROC				; Stack::show_top, COMDAT

; 45   : 	void show_top() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+280]

; 46   : 		if (isempty())

	mov	rcx, QWORD PTR this$[rbp]
	call	?isempty@Stack@@QEAA_NXZ		; Stack::isempty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@show_top

; 47   : 			cout << "Stack is empty!";

	lea	rdx, OFFSET FLAT:??_C@_0BA@LJDMLEOP@Stack?5is?5empty?$CB?$AA@
	mov	rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 48   : 		else

	jmp	SHORT $LN3@show_top
$LN2@show_top:

; 49   : 			cout << "Element at top is: " << array[top] << "\n";

	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax+8]
	mov	QWORD PTR tv80[rbp], rax
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv68[rbp], rcx
	lea	rdx, OFFSET FLAT:??_C@_0BE@HFOBAJI@Element?5at?5top?5is?3?5?$AA@
	mov	rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	rdx, QWORD PTR tv68[rbp]
	mov	rcx, QWORD PTR tv80[rbp]
	mov	edx, DWORD PTR [rdx+rcx*4]
	mov	rcx, rax
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
	lea	rdx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
	mov	rcx, rax
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
$LN3@show_top:

; 50   : 	}

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?show_top@Stack@@QEAAXXZ ENDP				; Stack::show_top
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File g:\github\nkuzmic97\practice.cpp\practice++\practice++\stack_simulation_using_array.cpp
;	COMDAT ?pop@Stack@@QEAAXXZ
_TEXT	SEGMENT
tv80 = 192
tv89 = 200
this$ = 240
?pop@Stack@@QEAAXXZ PROC				; Stack::pop, COMDAT

; 36   : 	void pop() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+280]

; 37   : 		if (isempty()) {

	mov	rcx, QWORD PTR this$[rbp]
	call	?isempty@Stack@@QEAA_NXZ		; Stack::isempty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@pop

; 38   : 			cout << "Stack is empty!";

	lea	rdx, OFFSET FLAT:??_C@_0BA@LJDMLEOP@Stack?5is?5empty?$CB?$AA@
	mov	rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 39   : 		}
; 40   : 		else {

	jmp	SHORT $LN3@pop
$LN2@pop:

; 41   : 			cout << "Value poped from stack: " << array[top] << "\n";

	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax+8]
	mov	QWORD PTR tv80[rbp], rax
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv89[rbp], rcx
	lea	rdx, OFFSET FLAT:??_C@_0BJ@KLKDPNDI@Value?5poped?5from?5stack?3?5?$AA@
	mov	rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	rcx, QWORD PTR tv89[rbp]
	mov	rdx, QWORD PTR tv80[rbp]
	mov	edx, DWORD PTR [rcx+rdx*4]
	mov	rcx, rax
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
	lea	rdx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
	mov	rcx, rax
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 42   : 			top--;

	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+8]
	dec	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx+8], eax
$LN3@pop:

; 43   : 		}
; 44   : 	}

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?pop@Stack@@QEAAXXZ ENDP				; Stack::pop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File g:\github\nkuzmic97\practice.cpp\practice++\practice++\stack_simulation_using_array.cpp
;	COMDAT ?push@Stack@@QEAAXH@Z
_TEXT	SEGMENT
tv90 = 192
tv80 = 200
this$ = 240
value$ = 248
?push@Stack@@QEAAXH@Z PROC				; Stack::push, COMDAT

; 27   : 	void push(int value) {

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+280]

; 28   : 		if (top == size - 1)

	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+12]
	dec	eax
	mov	rcx, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rcx+8], eax
	jne	SHORT $LN2@push

; 29   : 			cout << "Stack is full!";

	lea	rdx, OFFSET FLAT:??_C@_0P@LKJFJFHG@Stack?5is?5full?$CB?$AA@
	mov	rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 30   : 		else {

	jmp	$LN3@push
$LN2@push:

; 31   : 			top++;

	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx+8], eax

; 32   : 			array[top] = value;

	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, DWORD PTR value$[rbp]
	mov	DWORD PTR [rcx+rax*4], edx

; 33   : 			cout << "Value pushed into stack: " << array[top] << "\n";

	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax+8]
	mov	QWORD PTR tv90[rbp], rax
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv80[rbp], rcx
	lea	rdx, OFFSET FLAT:??_C@_0BK@GFPDMCBK@Value?5pushed?5into?5stack?3?5?$AA@
	mov	rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	rdx, QWORD PTR tv80[rbp]
	mov	rcx, QWORD PTR tv90[rbp]
	mov	edx, DWORD PTR [rdx+rcx*4]
	mov	rcx, rax
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
	lea	rdx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
	mov	rcx, rax
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
$LN3@push:

; 34   : 		}
; 35   : 	}

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?push@Stack@@QEAAXH@Z ENDP				; Stack::push
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File g:\github\nkuzmic97\practice.cpp\practice++\practice++\stack_simulation_using_array.cpp
;	COMDAT ?isempty@Stack@@QEAA_NXZ
_TEXT	SEGMENT
this$ = 224
?isempty@Stack@@QEAA_NXZ PROC				; Stack::isempty, COMDAT

; 21   : 	bool isempty() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	rbp, rsp
	mov	rdi, rsp
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+232]

; 22   : 		if (top == -1)

	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+8], -1
	jne	SHORT $LN2@isempty

; 23   : 			return true;

	mov	al, 1
	jmp	SHORT $LN1@isempty

; 24   : 		else

	jmp	SHORT $LN3@isempty
$LN2@isempty:

; 25   : 			return false;

	xor	al, al
$LN3@isempty:
$LN1@isempty:

; 26   : 	}

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?isempty@Stack@@QEAA_NXZ ENDP				; Stack::isempty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File g:\github\nkuzmic97\practice.cpp\practice++\practice++\stack_simulation_using_array.cpp
;	COMDAT ??1Stack@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
$T2 = 232
this$ = 288
??1Stack@@QEAA@XZ PROC					; Stack::~Stack, COMDAT

; 17   : 	~Stack() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	mov	QWORD PTR $T2[rbp], -2

; 18   : 		cout << "Pozvan destruktor.\n";

	lea	rdx, OFFSET FLAT:??_C@_0BE@DHDMOABD@Pozvan?5destruktor?4?6?$AA@
	mov	rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	npad	1

; 19   : 		delete[] array;

	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T1[rbp], rax
	mov	rcx, QWORD PTR $T1[rbp]
	call	??_V@YAXPEAX@Z				; operator delete[]
	npad	1

; 20   : 	}

	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
??1Stack@@QEAA@XZ ENDP					; Stack::~Stack
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File g:\github\nkuzmic97\practice.cpp\practice++\practice++\stack_simulation_using_array.cpp
;	COMDAT ??0Stack@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 200
tv71 = 216
this$ = 256
??0Stack@@QEAA@XZ PROC					; Stack::Stack, COMDAT

; 11   : 	Stack() :top(-1), size(SIZE){

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+8], -1
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+12], 10

; 12   : 		array = new int[size];

	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax+12]
	mov	QWORD PTR tv71[rbp], rax
	mov	eax, 4
	mov	rcx, QWORD PTR tv71[rbp]
	mul	rcx
	mov	rcx, -1
	cmovo	rax, rcx
	mov	rcx, rax
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	QWORD PTR $T1[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR $T1[rbp]
	mov	QWORD PTR [rax], rcx

; 13   : 	}

	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
??0Stack@@QEAA@XZ ENDP					; Stack::Stack
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File g:\vb.net\vc\include\iosfwd
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 605  : 		{	// return end-of-file metacharacter

$LN3:
	push	rbp
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	rbp, rsp
	mov	rdi, rsp
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 606  : 		return (EOF);

	mov	eax, -1

; 607  : 		}

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File g:\vb.net\vc\include\iosfwd
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z
_TEXT	SEGMENT
tv65 = 192
_Left$ = 240
_Right$ = 248
?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 594  : 		{	// test for metacharacter equality

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 216				; 000000d8H
	mov	rbp, rsp
	mov	rdi, rsp
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+248]

; 595  : 		return (_Left == _Right);

	mov	rax, QWORD PTR _Left$[rbp]
	mov	rcx, QWORD PTR _Right$[rbp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN3@eq_int_typ
	mov	DWORD PTR tv65[rbp], 1
	jmp	SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
	mov	DWORD PTR tv65[rbp], 0
$LN4@eq_int_typ:
	movzx	eax, BYTE PTR tv65[rbp]

; 596  : 		}

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ENDP	; std::char_traits<char>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File g:\vb.net\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SA_KPEBD@Z
_TEXT	SEGMENT
tv68 = 192
_First$ = 240
?length@?$char_traits@D@std@@SA_KPEBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 522  : 		{	// find length of null-terminated string

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+280]

; 523  : 		return (*_First == 0 ? 0

	mov	rax, QWORD PTR _First$[rbp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN3@length
	mov	QWORD PTR tv68[rbp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	rcx, QWORD PTR _First$[rbp]
	call	strlen
	mov	QWORD PTR tv68[rbp], rax
$LN4@length:
	mov	rax, QWORD PTR tv68[rbp]

; 524  : 			: _CSTD strlen(_First));
; 525  : 		}

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?length@?$char_traits@D@std@@SA_KPEBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File g:\github\nkuzmic97\practice.cpp\practice++\practice++\stack_simulation_using_array.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT

; 88   : }

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	rbp, rsp
	mov	rdi, rsp
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+232]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File g:\github\nkuzmic97\practice.cpp\practice++\practice++\stack_simulation_using_array.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 224
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT

; 88   : }

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	rbp, rsp
	mov	rdi, rsp
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+232]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
